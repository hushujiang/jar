package com.github.catvod.spider.merge.p044k;

import android.content.Context;
import com.github.catvod.crawler.SpiderDebug;
import com.github.catvod.spider.Dora;
import com.github.catvod.spider.merge.atm;
import com.github.catvod.spider.merge.p010K.C0052e;
import com.github.catvod.spider.merge.p042j.C0574b;
import java.net.URLEncoder;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;

/* renamed from: com.github.catvod.spider.merge.k.t */
/* loaded from: classes.dex */
public final class C0605t extends Dora {

    /* renamed from: c */
    private static final String f1147c;

    /* renamed from: d */
    private static final String f1148d;

    /* renamed from: e */
    private static final String f1149e;

    /* renamed from: b */
    protected JSONObject f1150b = null;

    static {
        String m897d = atm.m897d("B1DDA1DE97C2B1DEA1DE97FEB1D2A1ED97C3B1DFA1D397F8B1DEA1D797F9B1E2A1D797C4B1E6A1ED97F3B1DAA1D397C0B1E5A1ED97C1");
        while (true) {
            switch ((m897d.hashCode() ^ 313) ^ (-539456411)) {
                case -911557186:
                    f1148d = C0052e.m1418a(new byte[]{-80, -6, -2, 65, 34, -79, 26, -105, -71, -2, -29, 31, 38, -18, 87, -106, -21, -72, -70, 90, 48, -27, 27, -37, -73, -29, -91, 71, 96, -92, 81, -35, -84, -17, -29, 93}, new byte[]{-40, -114, -118, 49, 81, -117, 53, -72});
                    m897d = atm.m897d("B1EDA1D497C0B1DFA1D497C7B1E1A1EA97FDB1E2A1D497FCB1E1A1EE97C1B1DA");
                    break;
                case -679969347:
                    C0052e.m1418a(new byte[]{-27, 125, -33, -51, -106, -111, 108, -29, -20, 121, -62, -109, -110, -50, 33, -30, -66, 63, -101, -42, -124, -59, 109, -81, -30, 100, -124, -53, -44, -124, 37, -91, -31, 125, -50, -49, -54, -57, 42, -65, -7}, new byte[]{-115, 9, -85, -67, -27, -85, 67, -52});
                    m897d = atm.m897d("B1E3A1D197C4B1E2A1EC97FCB1D8A1DD97C4B1E2A1EE97FAB1DDA1E297FDB1E6");
                    break;
                case -36571635:
                    f1147c = C0052e.m1418a(new byte[]{64, 66, -69, 4, 103, 99, -116, 115, 73, 70, -90, 90, 99, 60, -63, 114, 27, 0, -1, 31, 117, 55, -115, 63, 71, 91, -32, 2, 37, 118, -47, 61, 70, 93, -16, 23, 117, 45, -98, 109}, new byte[]{40, 54, -49, 116, 20, 89, -93, 92});
                    m897d = atm.m897d("B1DBA1D497FDB1E0A1ED97F3B1E2A1D497C0B1E0A1D497FCB1DBA1E997FCB1E0A1EA97F0B1E2A1D797F3B1E1A1D097F8B1E6A1ED");
                    break;
                case 194473946:
                    return;
                case 588123946:
                    f1149e = C0052e.m1418a(new byte[]{Byte.MIN_VALUE, -46, 117, -106, 98, 4, 79, 6, -119, -42, 104, -56, 98, 81, 78, 26, -34, -106, 106, -121, Byte.MAX_VALUE, 16, 3, 70, -123, -119, 104, -120, 117, 91, 24, 22, -114, -55, 115, -123, 116, 97, 22, 20, -39, Byte.MIN_VALUE, 106, -111, 44, 27, 19, 15, -114, -44, 110, -117, 44, 24, 16, 72, -113, -61, 111, -119, 44, 15, 70, 95, -73, -57, 113, -37, 32, 24, 20, 72, -118, -101, 96, -118, 125}, new byte[]{-24, -90, 1, -26, 17, 62, 96, 41});
                    m897d = atm.m897d("B1D8A1ED97C4B1D1A1D497FDB1E2A1D197CFB1D8A1E297F0B1D8A1EE97FCB1EDA1EA97F0B1D6");
                    break;
            }
        }
    }

    /* renamed from: a */
    protected final HashMap<String, String> m254a() {
        HashMap<String, String> hashMap = null;
        String m897d = atm.m897d("B1E6A1D097F9B1E6A1D497CFB1DCA1E297C4B1E2A1EE97C1B1E0A1D197F9B1D8A1E397C1B1DB");
        while (true) {
            switch ((m897d.hashCode() ^ 974) ^ 1475092844) {
                case -1173544751:
                    hashMap.put(C0052e.m1418a(new byte[]{-41, 98, 6, -12, 4, -63, 45}, new byte[]{-123, 7, 96, -111, 118, -92, 95, 79}), C0052e.m1418a(new byte[]{92, -88, 14, -8, 11, 23, -21, -112, 85, -84, 19, -90, 15, 72, -90, -111, 7, -22, 74, -29, 25, 67, -22, -36, 91, -79}, new byte[]{52, -36, 122, -120, 120, 45, -60, -65}));
                    m897d = atm.m897d("B1DAA1EC97FEB1E2A1DD97CFB1D2A1EE97FCB1DBA1ED97FCB1D8A1D097C0B1E6A1EE97C1B1E0A1EA97CFB1E0A1D997F0B1E2");
                    break;
                case -252904020:
                    m897d = atm.m897d("B1E6A1D397C1B1D2A1E297C0B1E5A1E297FDB1E3A1EA97FEB1DFA1E997C4B1E2A1D097C1B1E2A1ED97C1B1E0A1DE");
                    break;
                case -19837765:
                    return hashMap;
                case 1318540239:
                    hashMap.put(C0052e.m1418a(new byte[]{-78, 42, 53, -93, -107, -28, 65, 90, -119, 45}, new byte[]{-25, 89, 80, -47, -72, -91, 38, 63}), C0052e.m1418a(new byte[]{-114, 8, -108, 48, 125, -14, -29, -56, -10, 73, -34, 121, 57, -45, -29, -124, -86, 9, -102, 54, 98, -10, -71, -57, -118, 9, -102, 60, 125, -66, -49, -122, -96, 71, -95, 10, 49, -58, -94, -42, -13, 56, -33, 108, 78, -87, -85, -57, -126, 23, -98, 53, 116, -55, -25, -123, -120, 14, -102, 118, 36, -83, -75, -55, -16, 81, -50, 113, 90, -42, -42, -86, -113, 75, -50, 53, 120, -11, -25, -57, -124, 2, -115, 50, 126, -73, -94, -92, -85, 21, -127, 52, 116, -79, -69, -42, -19, 87, -64, 109, 37, -87, -80, -55, -14, 86, -38, 121, 66, -1, -28, -122, -79, 14, -63, 108, 34, -87, -84, -44, -11}, new byte[]{-61, 103, -18, 89, 17, -98, -126, -25}));
                    m897d = atm.m897d("B1EDA1D597F4B1D1A1D397F0B1E1A1E997F9B1E2A1D397F8B1E0A1D497C4B1D6");
                    break;
                case 1358267124:
                    hashMap = new HashMap<>();
                    m897d = atm.m897d("B1EDA1EA97FCB1DAA1D097FCB1E5A1D197C7B1E5A1EF97FDB1E2A1D797C4B1DDA1D397C2B1DEA1D397CEB1DF");
                    break;
            }
        }
    }

    @Override // com.github.catvod.spider.Dora
    public final String categoryContent(String str, String str2, boolean z, HashMap<String, String> hashMap) {
        int i;
        try {
            Iterator<String> it = hashMap.keySet().iterator();
            String str3 = C0052e.m1418a(new byte[]{-97, 3, Byte.MIN_VALUE, 64, 46, 67, -79, -31, -106, 7, -99, 30, 42, 28, -4, -32, -60, 65, -60, 91, 60, 23, -80, -83, -104, 26, -37, 70, 108, 86, -8, -89, -101, 3, -111, 66, 114, 21, -9, -67, -125, 72, -105, 81, 41, 16, -6, -13}, new byte[]{-9, 119, -12, 48, 93, 121, -98, -50}) + str + C0052e.m1418a(new byte[]{87, -52, 89, 71, 119, -74, 18, -36}, new byte[]{113, -68, 56, 32, 18, -40, 125, -31}) + str2;
            while (true) {
                String m897d = atm.m897d("B1DDA1D997F3B1D2A1DD97FFB1E2A1E397F3B1E1A1D297F0B1EDA1DE97F8B1ECA1D997F4B1E6A1ED");
                while (true) {
                    switch (m897d.hashCode() ^ 1846091813) {
                        case -1923360981:
                            JSONObject jSONObject = new JSONObject(C0574b.m308e(str3, m254a())).getJSONObject(C0052e.m1418a(new byte[]{29, 64, -62, 99}, new byte[]{121, 33, -74, 2, -27, -91, 9, -108}));
                            JSONArray jSONArray = jSONObject.getJSONArray(C0052e.m1418a(new byte[]{-26, 15, -119, 117, 13, -117}, new byte[]{-117, 96, -1, 28, 104, -8, -91, 96}));
                            JSONArray jSONArray2 = new JSONArray();
                            int i2 = 0;
                            while (true) {
                                String m897d2 = atm.m897d("B1EDA1EE97CEB1D2A1D497C0B1DCA1D497FEB1DAA1EE97C2B1D1A1DD97FD");
                                while (true) {
                                    switch (m897d2.hashCode() ^ (-1448467543)) {
                                        case -1510038880:
                                            m897d2 = atm.m897d("B1DCA1D197C4B1EDA1D397C1B1DCA1D097C0B1DAA1ED97C3B1D8A1E297F3B1DDA1E297FD");
                                        case -1264046962:
                                            m897d2 = i2 < jSONArray.length() ? atm.m897d("B1DFA1ED97C4B1E2A1E997C2B1D6A1E397C1B1DAA1D797F4B1DBA1EA97C3B1DBA1ED97C2B1DBA1D497C0B1D6A1EF97FDB1E2A1D297FDB1D6A1EC97C1B1D6") : atm.m897d("B1E1A1EA97CEB1E2A1EA97F9B1D8A1D497C7B1DFA1ED97C3B1E5A1D097C0B1DCA1D097F8B1E0A1ED97FEB1E2A1D397F9B1DCA1DD97F4B1ED");
                                        case 852571740:
                                            JSONObject jSONObject2 = jSONArray.getJSONObject(i2);
                                            JSONObject jSONObject3 = new JSONObject();
                                            String string = jSONObject2.getString(C0052e.m1418a(new byte[]{63, -53, 22, -104, 41}, new byte[]{92, -92, 96, -3, 91, 57, -96, -21}));
                                            String m897d3 = atm.m897d("B1ECA1D097F4B1D6A1E297CFB1E6A1D397C0B1E2A1DE97F0B1E0A1D097F9B1D8A1EA97FFB1D6A1D397C0");
                                            while (true) {
                                                switch (m897d3.hashCode() ^ (-687654996)) {
                                                    case -1877218045:
                                                        jSONObject3.put(C0052e.m1418a(new byte[]{91, 116, -59, -9, -36, 36}, new byte[]{45, 27, -95, -88, -75, 64, -127, -47}), str + C0052e.m1418a(new byte[]{119}, new byte[]{40, -20, 7, -52, -24, -122, -100, 95}) + jSONObject2.getString(C0052e.m1418a(new byte[]{16, -105}, new byte[]{121, -13, -92, 115, 1, 90, -120, 48})));
                                                        jSONObject3.put(C0052e.m1418a(new byte[]{126, 56, 118, 7, 66, -112, -117, 47}, new byte[]{8, 87, 18, 88, 44, -15, -26, 74}), jSONObject2.getString(C0052e.m1418a(new byte[]{-31, 29, -49, -39, 108}, new byte[]{-107, 116, -69, -75, 9, -77, -111, -116})));
                                                        jSONObject3.put(C0052e.m1418a(new byte[]{-23, 59, 82, -4, 26, -26, 74}, new byte[]{-97, 84, 54, -93, 106, -113, 41, 32}), C0052e.m1418a(new byte[]{97, 28, 24, 28, -91, -113}, new byte[]{9, 104, 108, 108, -42, -75, -20, -8}) + string);
                                                        jSONObject3.put(C0052e.m1418a(new byte[]{-115, -98, 16, 75, -47, -80, 76, 118, -119, -102, 7}, new byte[]{-5, -15, 116, 20, -93, -43, 33, 23}), "");
                                                        break;
                                                    case -1372021943:
                                                        String string2 = jSONObject2.getString(C0052e.m1418a(new byte[]{75, 68, 11, -22, -15, 64}, new byte[]{62, 52, 98, -124, -105, 47, 117, 104}));
                                                        jSONObject3.put(C0052e.m1418a(new byte[]{-90, 74, -57, 22, -79, -70}, new byte[]{-48, 37, -93, 73, -40, -34, -1, 17}), str + C0052e.m1418a(new byte[]{-56}, new byte[]{-105, 70, -95, 98, 61, 64, 85, 25}) + jSONObject2.getString(C0052e.m1418a(new byte[]{38, 119}, new byte[]{79, 19, -97, 110, 35, -52, 92, 48})));
                                                        jSONObject3.put(C0052e.m1418a(new byte[]{111, 69, -52, -29, -93, -68, -37, -26}, new byte[]{25, 42, -88, -68, -51, -35, -74, -125}), jSONObject2.getString(C0052e.m1418a(new byte[]{-4, 85, -107, 60, 35}, new byte[]{-120, 60, -31, 80, 70, 107, 38, 9})));
                                                        jSONObject3.put(C0052e.m1418a(new byte[]{-38, 84, 55, -3, 14, -100, -33}, new byte[]{-84, 59, 83, -94, 126, -11, -68, -23}), C0052e.m1418a(new byte[]{-22, 44, 105, 45, 93, 116}, new byte[]{-126, 88, 29, 93, 46, 78, -51, -18}) + string);
                                                        jSONObject3.put(C0052e.m1418a(new byte[]{62, -117, 122, -67, -118, -47, 64, -5, 58, -113, 109}, new byte[]{72, -28, 30, -30, -8, -76, 45, -102}), string2);
                                                        break;
                                                    case 1256115288:
                                                        m897d3 = jSONObject2.has(C0052e.m1418a(new byte[]{-67, -69, 6, 66, -23, 117}, new byte[]{-56, -53, 111, 44, -113, 26, 66, -67})) ? atm.m897d("B1E0A1D997C1B1E2A1E297C4B1E5A1E397FEB1D2A1D297C2B1DEA1D097FAB1E1A1EE97F9B1DBA1EC97CFB1DCA1D997FDB1E2A1E297CEB1D8") : atm.m897d("B1E6A1D497C1B1DAA1D497FFB1D8A1D097C1B1DAA1E397FAB1DAA1D497F3B1EDA1EE97FCB1D6A1DE97FEB1E2");
                                                    case 2019228161:
                                                        m897d3 = atm.m897d("B1DCA1D097C1B1DBA1D397C3B1EDA1EF97C2B1DAA1EC97FEB1E2A1E997F0B1DAA1EA97C3B1DDA1EF97C0B1DA");
                                                }
                                            }
                                            jSONArray2.put(jSONObject3);
                                            i2++;
                                            break;
                                        case 2076413182:
                                            JSONObject jSONObject4 = new JSONObject();
                                            int parseInt = Integer.parseInt(jSONObject.getString(C0052e.m1418a(new byte[]{-83, -86, -32, 121, -77, 40, 124, -71, -66, -66, -11, 110}, new byte[]{-50, -33, -110, 11, -42, 70, 8, -26})));
                                            int i3 = jSONObject.getInt(C0052e.m1418a(new byte[]{18, 24, -34, 92, -119}, new byte[]{102, 119, -86, 61, -27, 5, -83, 27}));
                                            String m897d4 = atm.m897d("B1D2A1D597CEB1DCA1DE97FAB1DCA1E297F0B1E2A1D097CFB1D6A1D197F9B1E2");
                                            while (true) {
                                                switch (m897d4.hashCode() ^ (-1493237351)) {
                                                    case -1247982030:
                                                        m897d4 = atm.m897d("B1E6A1D297F3B1DEA1EE97FDB1E2A1D097C0B1DDA1ED97C7B1ECA1D397C0B1DBA1E997FFB1DCA1D797C7B1ECA1D097F8");
                                                        break;
                                                    case -128190310:
                                                        i = i3 / 24;
                                                        break;
                                                    case 537782378:
                                                        i = (i3 / 24) + 1;
                                                        break;
                                                    case 1210306488:
                                                        if (i3 % 24 != 0) {
                                                            m897d4 = atm.m897d("B1DAA1D297CEB1E2A1D197FCB1DFA1ED97C0B1D1A1D597FDB1DDA1D097C0B1DAA1EE97CFB1DEA1D097C4B1E2");
                                                            break;
                                                        } else {
                                                            m897d4 = atm.m897d("B1D2A1E297FAB1D6A1EC97C2B1DEA1DE97FDB1DAA1D397FFB1E1A1DD97FCB1DBA1DD97F9B1EDA1D397FDB1DB");
                                                            break;
                                                        }
                                                }
                                            }
                                            jSONObject4.put(C0052e.m1418a(new byte[]{119, 101, -82, 82}, new byte[]{7, 4, -55, 55, -127, -69, 0, 81}), parseInt);
                                            jSONObject4.put(C0052e.m1418a(new byte[]{112, 107, 59, -50, 1, -75, -106, -5, 116}, new byte[]{0, 10, 92, -85, 98, -38, -29, -107}), i);
                                            jSONObject4.put(C0052e.m1418a(new byte[]{46, 88, 60, -80, 97}, new byte[]{66, 49, 81, -39, 21, 30, -98, -70}), 24);
                                            jSONObject4.put(C0052e.m1418a(new byte[]{100, -6, 22, 59, 88}, new byte[]{16, -107, 98, 90, 52, -18, 14, -70}), i3);
                                            jSONObject4.put(C0052e.m1418a(new byte[]{-33, -112, -24, -112}, new byte[]{-77, -7, -101, -28, -84, -4, -3, -41}), jSONArray2);
                                            return jSONObject4.toString();
                                    }
                                }
                            }
                            break;
                        case -1342129057:
                            String next = it.next();
                            String trim = hashMap.get(next).trim();
                            String m897d5 = atm.m897d("B1D1A1EA97F4B1EDA1D597C4B1E2A1EC97F3B1DAA1E397C2B1DFA1ED97F8B1DEA1ED97C0B1DFA1D097C0B1DDA1DE97FC");
                            while (true) {
                                switch (m897d5.hashCode() ^ 1845326346) {
                                    case -1962750938:
                                        str3 = str3 + C0052e.m1418a(new byte[]{-80}, new byte[]{-106, -116, 57, 36, 76, 73, 49, 17}) + next + C0052e.m1418a(new byte[]{-93}, new byte[]{-98, -51, -105, -61, 98, -100, 91, 110}) + URLEncoder.encode(trim);
                                        break;
                                    case -831897979:
                                        break;
                                    case 1070863045:
                                        m897d5 = atm.m897d("B1EDA1EC97C0B1DEA1EF97CFB1DEA1E297FDB1E5A1D097CFB1E5A1D797C4");
                                    case 1793223358:
                                        m897d5 = trim.length() == 0 ? atm.m897d("B1E5A1DE97C4B1E2A1EA97C7B1E6A1ED97C1B1DBA1D197CFB1E0A1D797FFB1D6A1D297C1B1D2A1DE97FAB1ECA1EE97C1B1E5A1D797FAB1E3A1E397C0") : atm.m897d("B1DDA1E397FEB1DBA1D497C4B1E2A1E397FDB1D8A1ED97C4B1DBA1ED97FEB1E5A1D097C0B1E3A1D297FDB1DBA1D797CFB1E0A1D797F9B1E2A1EA97F0B1E0");
                                }
                            }
                            break;
                        case 1044837619:
                            m897d = it.hasNext() ? atm.m897d("B1D8A1DD97C3B1EDA1E397F0B1E2A1D097FFB1DBA1ED97C3B1DDA1D097C0B1D1A1ED97FDB1DCA1E997FDB1E2") : atm.m897d("B1E6A1D197FAB1E5A1D997CEB1E2A1EA97FFB1D6A1D397C2B1D8A1D297F0B1D8");
                        case 2070346176:
                            m897d = atm.m897d("B1D8A1E997FEB1E6A1E397CEB1E2A1E297C1B1E5A1DD97C4B1E2A1ED97CEB1E2A1EC97FAB1D6A1D097FFB1DFA1D797FCB1E3A1D3");
                    }
                }
            }
        } catch (Exception e) {
            SpiderDebug.log(e);
            return "";
        }
    }

    /*  JADX ERROR: JadxRuntimeException in pass: BlockProcessor
        jadx.core.utils.exceptions.JadxRuntimeException: CFG modification limit reached, blocks count: 433
        	at jadx.core.dex.visitors.blocks.BlockProcessor.processBlocksTree(BlockProcessor.java:59)
        	at jadx.core.dex.visitors.blocks.BlockProcessor.visit(BlockProcessor.java:39)
        */
    @Override // com.github.catvod.spider.Dora
    public final java.lang.String detailContent(java.util.List<java.lang.String> r22) {
        /*
            Method dump skipped, instructions count: 4144
            To view this dump change 'Code comments level' option to 'DEBUG'
        */
        throw new UnsupportedOperationException("Method not decompiled: com.github.catvod.spider.merge.p044k.C0605t.detailContent(java.util.List):java.lang.String");
    }

    @Override // com.github.catvod.spider.Dora
    public final String homeContent(boolean z) {
        JSONObject jSONObject = new JSONObject();
        try {
            jSONObject.put(C0052e.m1418a(new byte[]{-54, -12, -21, 1, 45}, new byte[]{-87, -104, -118, 114, 94, 81, 116, 38}), this.f1150b.getJSONArray(C0052e.m1418a(new byte[]{79, 25, 100, -112, -10, -125, 7}, new byte[]{44, 117, 5, -29, -123, -26, 116, -68})));
            String m897d = atm.m897d("B1DBA1EA97FAB1D8A1D297C1B1E1A1EF97FCB1DEA1EF97C4B1E2A1D097FCB1DCA1ED97FFB1ECA1D497FDB1DFA1EC97CEB1ECA1E297F3B1E3A1D0");
            while (true) {
                switch (m897d.hashCode() ^ 1296955311) {
                    case -2013104272:
                        if (!z) {
                            m897d = atm.m897d("B1EDA1EC97FFB1DBA1D997FAB1DBA1D197F8B1E2A1D297FEB1E1A1E297C1B1E2A1E297C4B1E2");
                            break;
                        } else {
                            m897d = atm.m897d("B1DEA1D997FFB1DAA1D597CFB1E2A1D097F0B1DAA1D297F3B1DEA1E2");
                            break;
                        }
                    case -490581085:
                        break;
                    case 743132149:
                        jSONObject.put(C0052e.m1418a(new byte[]{-25, -28, -117, -35, -43, 9, -81}, new byte[]{-127, -115, -25, -87, -80, 123, -36, 24}), this.f1150b.getJSONObject(C0052e.m1418a(new byte[]{-124, 57, -110, -64, 14, 60}, new byte[]{-30, 80, -2, -76, 107, 78, 29, -101})));
                        break;
                    case 879493659:
                        m897d = atm.m897d("B1D1A1E997FDB1EDA1E397FEB1D6A1D597F9B1E2A1D097F8B1DFA1ED97C7B1DFA1D097F4B1E5A1DE97FEB1E1");
                        break;
                }
            }
        } catch (JSONException e) {
            SpiderDebug.log(e);
        }
        return jSONObject.toString();
    }

    @Override // com.github.catvod.spider.Dora
    public final String homeVideoContent() {
        JSONArray optJSONArray;
        JSONArray jSONArray;
        int i;
        JSONObject jSONObject = new JSONObject();
        try {
            String str = f1147c;
            String m307f = C0574b.m307f(str, m254a(), null);
            SpiderDebug.log(C0052e.m1418a(new byte[]{-69, -27, -26, 98, 103, 13, 27, -15, -23, -112, -38, 5, 50, 37, 105}, new byte[]{94, 118, 107, -121, -35, -103, -13, 94}) + str);
            optJSONArray = new JSONObject(m307f).optJSONArray(C0052e.m1418a(new byte[]{74, -100, 80, 117}, new byte[]{46, -3, 36, 20, 84, -32, 55, 97}));
            jSONArray = new JSONArray();
            i = 0;
        } catch (Exception e) {
            SpiderDebug.log(e);
        }
        while (true) {
            String m897d = atm.m897d("B1DCA1DE97FDB1DCA1D297FDB1E2A1EC97C2B1ECA1ED97C3B1D2A1EC97F9B1D8A1D397C0");
            while (true) {
                switch (m897d.hashCode() ^ (-1466665103)) {
                    case 1592296378:
                        m897d = atm.m897d("B1DCA1D597C7B1E0A1EE97C4B1E2A1D297C7B1D2A1ED97F0B1E5A1ED97F9B1DEA1E997F8B1E0A1D497CEB1EDA1D397FAB1D1A1E397C0");
                    case 1891965534:
                        jSONObject.put(C0052e.m1418a(new byte[]{27, 34, -46, 119}, new byte[]{119, 75, -95, 3, 120, -119, 5, -37}), jSONArray);
                        break;
                    case 2034703386:
                        break;
                    case 2071886649:
                        m897d = i < optJSONArray.length() ? atm.m897d("B1DDA1D797C1B1DBA1E297FDB1E2A1EF97FCB1E2A1ED97FFB1EDA1E297C4B1DBA1DD97C0") : atm.m897d("B1EDA1EA97C2B1EDA1EC97FEB1E2A1D597F0B1E2A1DE97FAB1E2A1ED97CFB1DFA1D997F9B1E0A1DD97FFB1DAA1EE97CEB1E1A1D197F9B1E3A1E3");
                }
            }
            return jSONObject.toString();
            JSONObject jSONObject2 = optJSONArray.getJSONObject(i);
            JSONObject jSONObject3 = new JSONObject();
            String m1418a = C0052e.m1418a(new byte[]{31, -15, 34, 67, 123, 85}, new byte[]{105, -98, 70, 28, 18, 49, -25, -78});
            jSONObject3.put(m1418a, jSONObject2.optString(C0052e.m1418a(new byte[]{107, 117, 108}, new byte[]{8, 20, 24, -74, -95, 89, -65, -12})) + C0052e.m1418a(new byte[]{-44}, new byte[]{-117, -58, 19, 56, -105, -74, 43, -35}) + jSONObject2.optString(C0052e.m1418a(new byte[]{124, -63, -73, Byte.MIN_VALUE, 37, -21}, new byte[]{25, -81, -61, -33, 76, -113, 76, 18})));
            jSONObject3.put(C0052e.m1418a(new byte[]{3, -68, 99, -80, 27, -55, 29, 11}, new byte[]{117, -45, 7, -17, 117, -88, 112, 110}), jSONObject2.optString(C0052e.m1418a(new byte[]{-50, -92, -52, -21, 48}, new byte[]{-70, -51, -72, -121, 85, 113, -65, 56})));
            jSONObject3.put(C0052e.m1418a(new byte[]{-46, 77, -94, -14, 37, -68, 89}, new byte[]{-92, 34, -58, -83, 85, -43, 58, 28}), jSONObject2.optString(C0052e.m1418a(new byte[]{48, 79, 84, -31, -32}, new byte[]{83, 32, 34, -124, -110, -23, 55, 95})));
            jSONObject3.put(C0052e.m1418a(new byte[]{20, 93, -41, -53, 71, 53, 118, 98, 16, 89, -64}, new byte[]{98, 50, -77, -108, 53, 80, 27, 3}), jSONObject2.optString(C0052e.m1418a(new byte[]{-12, 93, 7, 16, -29, -20}, new byte[]{-127, 45, 110, 126, -123, -125, 29, 7})));
            jSONArray.put(jSONObject3);
            i++;
        }
    }

    @Override // com.github.catvod.spider.Dora
    public final void init(Context context) {
        super.init(context);
        try {
            this.f1150b = new JSONObject(atm.m897d
        } catch (JSONException e) {
            SpiderDebug.log(e);
        }
    }

    @Override // com.github.catvod.spider.Dora
    public final boolean isVideoFormat(String str) {
        String m897d = atm.m897d("B1E3A1D097C1B1E6A1E297FDB1D6A1D997F9B1DAA1EA97FFB1E2A1EF97FDB1E2A1EF97F9B1DBA1D797C4B1D2A1ED");
        while (true) {
            switch ((m897d.hashCode() ^ 253) ^ (-578767302)) {
                case 1091451637:
                    m897d = atm.m897d("B1DDA1ED97FFB1DDA1D297F8B1ECA1EF97FFB1E0A1D397FEB1E2A1EA97FAB1DBA1EC97C1B1DFA1ED");
                    break;
                case 1105367965:
                    return false;
                case 1924902572:
                    m897d = atm.m897d("B1E0A1E297C2B1D8A1ED97FCB1D1A1E997C4B1E2A1D797C4B1D2A1DD97F3B1DF");
                    break;
            }
        }
    }

    @Override // com.github.catvod.spider.Dora
    public final boolean manualVideoCheck() {
        String m897d = atm.m897d("B1ECA1D497F9B1E3A1D397C2B1DDA1EE97C7B1D8A1ED97FCB1E3A1EA97FAB1E0A1E397FCB1DAA1D797FFB1EDA1E397C0B1EDA1D397C0");
        while (true) {
            switch ((m897d.hashCode() ^ 452) ^ (-943179919)) {
                case -1562127754:
                    return false;
                case 1596863834:
                    m897d = atm.m897d("B1DDA1D197CEB1D8A1DD97FEB1E2A1E997FEB1DDA1ED97FCB1E0A1D997F0B1E5A1E397C0");
                    break;
            }
        }
    }

    @Override // com.github.catvod.spider.Dora
    public final String playerContent(String str, String str2, List<String> list) {
        JSONObject jSONObject = new JSONObject();
        try {
            jSONObject.put(C0052e.m1418a(new byte[]{101, 18, -54, -20, 79}, new byte[]{21, 115, -72, -97, 42, 77, 107, -22}), 1);
            jSONObject.put(C0052e.m1418a(new byte[]{-97, 58, 13}, new byte[]{-22, 72, 97, -30, 74, -70, 71, -31}), str2.split(C0052e.m1418a(new byte[]{58, -60}, new byte[]{102, -5, -19, -14, -86, -63, 87, -112}))[0]);
            jSONObject.put(C0052e.m1418a(new byte[]{114, 49}, new byte[]{24, 73, -1, -5, -81, -62, -21, -59}), C0052e.m1418a(new byte[]{-94}, new byte[]{-109, -124, -55, -87, -55, -78, 9, -80}));
            jSONObject.put(C0052e.m1418a(new byte[]{6, -15, -54, -114, -41, -69, 25}, new byte[]{118, -99, -85, -9, -126, -55, 117, -76}), "");
        } catch (Exception e) {
            SpiderDebug.log(e);
        }
        return jSONObject.toString();
    }

    @Override // com.github.catvod.spider.Dora
    public final String searchContent(String str, boolean z) {
        JSONObject jSONObject = new JSONObject();
        try {
            JSONObject optJSONObject = new JSONObject(C0574b.m307f(String.format(f1149e, str), m254a(), null)).optJSONObject(C0052e.m1418a(new byte[]{35, 64, 50, -126}, new byte[]{71, 33, 70, -29, 105, -60, 64, -123}));
            String m897d = atm.m897d("B1E3A1DE97F3B1E1A1DD97FDB1E2A1D597F0B1E6A1E397F4B1E6A1ED97C4B1E2A1ED97FFB1E2A1D597C1B1E0A1E397C2B1DFA1EF97C4B1DBA1D1");
            while (true) {
                switch (m897d.hashCode() ^ (-200313005)) {
                    case -1843882961:
                        m897d = atm.m897d("B1DFA1D997FAB1DEA1EE97C7B1DFA1D997CEB1E2A1E997F0B1DCA1E297C3B1DBA1E997CEB1E6A1EC97F8B1DCA1ED97F4B1E3A1D197F8B1E6A1ED");
                        break;
                    case -1799595120:
                        break;
                    case -839234762:
                        if (optJSONObject == null) {
                            m897d = atm.m897d("B1EDA1EA97C2B1DCA1D497FAB1E6A1D997F9B1E2A1EC97C4B1E2A1ED97C7B1D1A1EC97FDB1D8A1D397C0B1E1A1D497C0B1DFA1ED97F3");
                            break;
                        } else {
                            m897d = atm.m897d("B1EDA1D397F3B1E3A1D297F0B1E2A1D797C0B1D2A1DE97FCB1D1A1E297C0B1DEA1D797FDB1D2");
                            break;
                        }
                    case -215536396:
                        JSONObject optJSONObject2 = optJSONObject.optJSONObject(C0052e.m1418a(new byte[]{-82, -106, 97, 121, Byte.MAX_VALUE, 55, -3, Byte.MIN_VALUE}, new byte[]{-62, -7, 15, 30, 59, 86, -119, -31}));
                        String m897d2 = atm.m897d("B1E2A1D297FDB1EDA1D197CEB1D8A1DD97C7B1EDA1D197C0B1E2A1EE97CEB1DE");
                        while (true) {
                            switch (m897d2.hashCode() ^ 1063508282) {
                                case -1882846587:
                                    JSONArray jSONArray = optJSONObject2.getJSONArray(C0052e.m1418a(new byte[]{32, -42, -120, -20}, new byte[]{82, -71, -1, -97, 9, 48, -62, 79}));
                                    JSONArray jSONArray2 = new JSONArray();
                                    jSONObject.put(C0052e.m1418a(new byte[]{14, 55, 41, -58}, new byte[]{98, 94, 90, -78, -8, 82, 2, 111}), jSONArray2);
                                    int i = 0;
                                    while (true) {
                                        String m897d3 = atm.m897d("B1DBA1E297FDB1ECA1D197F3B1EDA1EC97FAB1E5A1D997F3B1E3A1D597F9");
                                        while (true) {
                                            switch (m897d3.hashCode() ^ 1949793649) {
                                                case -1664782509:
                                                    m897d3 = atm.m897d("B1DCA1D797CFB1DCA1D397FEB1DBA1ED97FFB1E2A1EF97C0B1D1A1D597C1B1DBA1ED97F9B1E6A1EA97C3B1DDA1E297FEB1DAA1E9");
                                                case -801318849:
                                                    m897d3 = i < jSONArray.length() ? atm.m897d("B1E2A1EC97C7B1D2A1E297F0B1E5A1EC97F4B1D2A1D197FDB1E2A1ED97F4B1E2A1ED97C2B1E1A1EA97F8B1DCA1D9") : atm.m897d("B1DBA1DD97FCB1DDA1E397FDB1E2A1EA97C1B1ECA1D597CEB1D1A1D597FDB1EDA1EF97FCB1D2A1ED97C1B1DCA1ED97FCB1E6A1E997C0");
                                                case -716544262:
                                                    break;
                                                case 819355264:
                                                    break;
                                            }
                                        }
                                        JSONObject jSONObject2 = jSONArray.getJSONObject(i);
                                        JSONObject jSONObject3 = new JSONObject();
                                        jSONObject3.put(C0052e.m1418a(new byte[]{-7, 2, -111, 13, -100, -72}, new byte[]{-113, 109, -11, 82, -11, -36, 119, 77}), jSONObject2.optString(C0052e.m1418a(new byte[]{-116, -88, -19, -21, -10, -90}, new byte[]{-17, -55, -103, -76, -97, -62, -73, 39})) + C0052e.m1418a(new byte[]{14}, new byte[]{81, 60, -124, -28, -52, 10, 98, 30}) + jSONObject2.optString(C0052e.m1418a(new byte[]{54, 11, -89, Byte.MIN_VALUE, 49}, new byte[]{83, 101, -8, -23, 85, 19, -42, 48})));
                                        jSONObject3.put(C0052e.m1418a(new byte[]{-10, 51, 102, -22, 90, 104, -13, 3}, new byte[]{Byte.MIN_VALUE, 92, 2, -75, 52, 9, -98, 102}), jSONObject2.optString(C0052e.m1418a(new byte[]{110, -9, 72, 92, 106, 4, -95, 86}, new byte[]{26, -98, 60, 48, 15, 80, -39, 34})));
                                        jSONObject3.put(C0052e.m1418a(new byte[]{15, -54, 126, Byte.MIN_VALUE, -111, 27, 70}, new byte[]{121, -91, 26, -33, -31, 114, 37, 78}), jSONObject2.optString(C0052e.m1418a(new byte[]{-50, 90, -126, 41, -120}, new byte[]{-83, 53, -12, 76, -6, 1, 21, 15})));
                                        jSONObject3.put(C0052e.m1418a(new byte[]{125, 8, -57, -93, -4, 63, 103, 71, 121, 12, -48}, new byte[]{11, 103, -93, -4, -114, 90, 10, 38}), jSONObject2.optString(C0052e.m1418a(new byte[]{82, -89, -25, 28, -108}, new byte[]{33, -60, -120, 110, -15, -72, -51, -50})));
                                        jSONArray2.put(jSONObject3);
                                        i++;
                                    }
                                    break;
                                case -1190988084:
                                    if (optJSONObject2 == null) {
                                        m897d2 = atm.m897d("B1DAA1D597C7B1D1A1ED97C4B1E2A1EC97C7B1D2A1EE97C7B1DDA1D297C3B1D6");
                                        break;
                                    } else {
                                        m897d2 = atm.m897d("B1E1A1D597F0B1E5A1D197FFB1E6A1D597C1B1E2A1DE97C4B1E2A1DD97F4B1E2");
                                        break;
                                    }
                                case -266690059:
                                    break;
                                case 394659765:
                                    m897d2 = atm.m897d("B1DFA1D297F9B1D8A1D797FFB1ECA1E297F4B1EDA1D397F8B1E2A1DD97F8B1D8A1E397C3B1DDA1DD97FEB1D8A1EC97CE");
                                    break;
                            }
                        }
                        break;
                }
            }
        } catch (Exception e) {
            SpiderDebug.log(e);
        }
        return jSONObject.toString();
    }
}
